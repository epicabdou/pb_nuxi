<template>
  <div class="min-h-screen bg-background-100 dark:bg-background-900">
    <AdminLayout>
      <template #header>
        <div class="flex justify-between items-center">
          <h1 class="heading-3">Product Management</h1>
          <button
              @click="openProductModal()"
              class="btn-primary btn-icon-text"
          >
            <PlusIcon class="w-5 h-5" />
            <span>Add Product</span>
          </button>
        </div>
      </template>

      <!-- Loading state -->
      <div v-if="isLoading" class="flex justify-center items-center py-20">
        <div class="flex flex-col items-center">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
          <p class="mt-4 text-background-700 dark:text-background-300">Loading products...</p>
        </div>
      </div>

      <!-- Error state -->
      <div v-else-if="error" class="bg-error-50 dark:bg-error-900/20 border border-error-200 dark:border-error-800 rounded-lg p-4 my-6">
        <div class="flex">
          <AlertCircleIcon class="h-5 w-5 text-error-500 mr-3" />
          <p class="text-error-700 dark:text-error-400">{{ error }}</p>
        </div>
      </div>

      <!-- Empty state -->
      <div v-else-if="products.length === 0" class="bg-white dark:bg-background-800 rounded-xl p-8 shadow-soft text-center my-8">
        <PackageIcon class="h-16 w-16 text-background-400 mx-auto mb-4" />
        <h3 class="heading-4 mb-2">No products yet</h3>
        <p class="text-background-600 dark:text-background-400 mb-6">Get started by adding your first product</p>
        <button
            @click="openProductModal()"
            class="btn-primary"
        >
          Add Your First Product
        </button>
      </div>

      <!-- Products list -->
      <div v-else>
        <!-- Filter and sort controls -->
        <div class="bg-white dark:bg-background-800 rounded-xl p-4 shadow-soft mb-6">
          <div class="flex flex-col md:flex-row gap-4">
            <div class="flex-1">
              <div class="input-group">
                <SearchIcon class="absolute left-3 top-3 h-5 w-5 text-background-500" />
                <input
                    v-model="searchQuery"
                    type="text"
                    placeholder="Search products..."
                    class="input-primary input-icon"
                />
              </div>
            </div>
            <div class="flex gap-4">
              <select v-model="categoryFilter" class="select">
                <option value="">All Categories</option>
                <option v-for="category in categories" :key="category.id" :value="category.id">
                  {{ category.name }}
                </option>
              </select>
              <select v-model="sortBy" class="select">
                <option value="name_asc">Name (A-Z)</option>
                <option value="name_desc">Name (Z-A)</option>
                <option value="price_asc">Price (Low-High)</option>
                <option value="price_desc">Price (High-Low)</option>
                <option value="created_desc">Newest First</option>
                <option value="created_asc">Oldest First</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Products table -->
        <div class="bg-white dark:bg-background-800 rounded-xl shadow-soft overflow-hidden">
          <div class="overflow-x-auto">
            <table class="w-full">
              <thead class="bg-background-100 dark:bg-background-700 border-b border-background-200 dark:border-background-600">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-background-700 dark:text-background-300 uppercase tracking-wider">
                  Image
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-background-700 dark:text-background-300 uppercase tracking-wider">
                  Name
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-background-700 dark:text-background-300 uppercase tracking-wider">
                  Price
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-background-700 dark:text-background-300 uppercase tracking-wider">
                  Stock
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-background-700 dark:text-background-300 uppercase tracking-wider">
                  Categories
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-background-700 dark:text-background-300 uppercase tracking-wider">
                  Status
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-background-700 dark:text-background-300 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
              </thead>
              <tbody class="divide-y divide-background-200 dark:divide-background-700">
              <tr v-for="product in filteredProducts" :key="product.id" class="hover:bg-background-50 dark:hover:bg-background-800/70">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="h-12 w-12 rounded-md overflow-hidden bg-background-200 dark:bg-background-700">
                    <img
                        v-if="product.imageUrl"
                        :src="product.imageUrl"
                        :alt="product.name"
                        class="h-full w-full object-cover"
                    />
                    <div v-else class="h-full w-full flex items-center justify-center">
                      <ImageIcon class="h-6 w-6 text-background-400" />
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="font-medium text-background-900 dark:text-white">{{ product.name }}</div>
                  <div class="text-sm text-background-500">{{ product.slug }}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-background-900 dark:text-white">${{ product.price.toFixed(2) }}</div>
                  <div v-if="product.promoPrice" class="text-sm text-success-600 dark:text-success-400">
                    Sale: ${{ product.promoPrice.toFixed(2) }}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span
                        :class="{
                        'text-error-600 dark:text-error-400': product.stock === 0,
                        'text-warning-600 dark:text-warning-400': product.stock > 0 && product.stock < 10,
                        'text-success-600 dark:text-success-400': product.stock >= 10
                      }"
                    >
                      {{ product.stock ?? 'Unlimited' }}
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex flex-wrap gap-2">
                      <span
                          v-for="categoryId in product.category"
                          :key="categoryId"
                          class="badge-outline-primary text-xs"
                      >
                        {{ getCategoryName(categoryId) }}
                      </span>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span
                        class="badge"
                        :class="{
                        'bg-success-100 text-success-800 dark:bg-success-900/20 dark:text-success-400': product.isFeatured,
                        'bg-background-100 text-background-800 dark:bg-background-800 dark:text-background-400': !product.isFeatured
                      }"
                    >
                      {{ product.isFeatured ? 'Featured' : 'Standard' }}
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex space-x-2">
                    <button
                        @click="openProductModal(product)"
                        class="p-1.5 rounded-lg text-background-600 hover:text-background-900 dark:text-background-400 dark:hover:text-background-100 hover:bg-background-200 dark:hover:bg-background-700"
                    >
                      <PencilIcon class="h-4 w-4" />
                    </button>
                    <button
                        @click="confirmDeleteProduct(product)"
                        class="p-1.5 rounded-lg text-background-600 hover:text-error-600 dark:text-background-400 dark:hover:text-error-400 hover:bg-background-200 dark:hover:bg-background-700"
                    >
                      <TrashIcon class="h-4 w-4" />
                    </button>
                  </div>
                </td>
              </tr>
              </tbody>
            </table>
          </div>

          <!-- Pagination -->
          <div class="px-6 py-4 bg-background-50 dark:bg-background-800/70 border-t border-background-200 dark:border-background-700 flex justify-between items-center">
            <div class="text-sm text-background-600 dark:text-background-400">
              Showing {{ Math.min(1, filteredProducts.length) }} to {{ filteredProducts.length }} of {{ filteredProducts.length }} products
            </div>
            <div class="flex space-x-2">
              <button
                  class="btn-ghost btn-sm disabled:opacity-50 disabled:cursor-not-allowed"
                  :disabled="currentPage === 1"
                  @click="currentPage--"
              >
                Previous
              </button>
              <button
                  v-for="page in totalPages"
                  :key="page"
                  @click="currentPage = page"
                  class="px-3 py-1 rounded-md"
                  :class="{
                  'bg-primary-500 text-white': currentPage === page,
                  'hover:bg-background-200 dark:hover:bg-background-700': currentPage !== page
                }"
              >
                {{ page }}
              </button>
              <button
                  class="btn-ghost btn-sm disabled:opacity-50 disabled:cursor-not-allowed"
                  :disabled="currentPage === totalPages"
                  @click="currentPage++"
              >
                Next
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Product modal -->
      <transition name="fade">
        <div
            v-if="showProductModal"
            class="fixed inset-0 bg-background-900/80 dark:bg-background-950/80 backdrop-blur-sm z-50 flex justify-center items-center p-4"
        >
          <div
              class="bg-white dark:bg-background-800 rounded-2xl shadow-elevated w-full max-w-3xl max-h-[90vh] overflow-auto animate-slide-up"
              @click.stop
          >
            <div class="p-6 border-b border-background-200 dark:border-background-700 flex justify-between items-center">
              <h2 class="heading-4">{{ editingProduct.id ? 'Edit Product' : 'Add New Product' }}</h2>
              <button @click="showProductModal = false" class="p-1.5 rounded-lg hover:bg-background-200 dark:hover:bg-background-700">
                <XIcon class="h-5 w-5 text-background-600 dark:text-background-400" />
              </button>
            </div>

            <form @submit.prevent="saveProduct" class="p-6 space-y-6">
              <!-- Basic information -->
              <div class="space-y-4">
                <h3 class="heading-5 text-background-800 dark:text-background-200">Basic Information</h3>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label for="name" class="input-label">Product Name*</label>
                    <input
                        id="name"
                        v-model="editingProduct.name"
                        type="text"
                        required
                        class="input-primary"
                        placeholder="Enter product name"
                    />
                  </div>
                  <div>
                    <label for="slug" class="input-label">Slug*</label>
                    <input
                        id="slug"
                        v-model="editingProduct.slug"
                        type="text"
                        required
                        class="input-primary"
                        placeholder="product-slug"
                    />
                    <p class="input-help">Must be unique, used in URL</p>
                  </div>
                </div>

                <div>
                  <label for="shortDescription" class="input-label">Short Description*</label>
                  <textarea
                      id="shortDescription"
                      v-model="editingProduct.shortDescription"
                      rows="2"
                      required
                      class="input-primary"
                      placeholder="Brief product description"
                  ></textarea>
                </div>

                <div>
                  <label for="longDescription" class="input-label">Long Description</label>
                  <textarea
                      id="longDescription"
                      v-model="editingProduct.longDescription"
                      rows="4"
                      class="input-primary"
                      placeholder="Detailed product description"
                  ></textarea>
                </div>
              </div>

              <!-- Pricing and inventory -->
              <div class="space-y-4 pt-2">
                <h3 class="heading-5 text-background-800 dark:text-background-200">Pricing & Inventory</h3>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label for="price" class="input-label">Price*</label>
                    <div class="input-group">
                      <span class="absolute left-3 top-3 text-background-600 dark:text-background-400">$</span>
                      <input
                          id="price"
                          v-model.number="editingProduct.price"
                          type="number"
                          step="0.01"
                          min="0"
                          required
                          class="input-primary pl-8"
                          placeholder="0.00"
                      />
                    </div>
                  </div>
                  <div>
                    <label for="promoPrice" class="input-label">Sale Price</label>
                    <div class="input-group">
                      <span class="absolute left-3 top-3 text-background-600 dark:text-background-400">$</span>
                      <input
                          id="promoPrice"
                          v-model.number="editingProduct.promoPrice"
                          type="number"
                          step="0.01"
                          min="0"
                          class="input-primary pl-8"
                          placeholder="0.00"
                      />
                    </div>
                  </div>
                  <div>
                    <label for="stock" class="input-label">Stock</label>
                    <input
                        id="stock"
                        v-model.number="editingProduct.stock"
                        type="number"
                        min="0"
                        class="input-primary"
                        placeholder="Leave blank for unlimited"
                    />
                  </div>
                </div>

                <div class="flex items-center">
                  <input
                      id="isFeatured"
                      v-model="editingProduct.isFeatured"
                      type="checkbox"
                      class="checkbox"
                  />
                  <label for="isFeatured" class="ml-2 text-background-700 dark:text-background-300">
                    Featured Product
                  </label>
                </div>
              </div>

              <!-- Categories and tags -->
              <div class="space-y-4 pt-2">
                <h3 class="heading-5 text-background-800 dark:text-background-200">Categories & Tags</h3>

                <div>
                  <label class="input-label">Categories*</label>
                  <div class="space-y-2">
                    <div v-if="categories.length === 0" class="text-sm text-background-600 dark:text-background-400">
                      No categories available. Please create categories first.
                    </div>
                    <div v-else class="grid grid-cols-2 md:grid-cols-3 gap-2">
                      <div v-for="category in categories" :key="category.id" class="flex items-center">
                        <input
                            :id="`category-${category.id}`"
                            v-model="editingProduct.category"
                            :value="category.id"
                            type="checkbox"
                            class="checkbox"
                        />
                        <label :for="`category-${category.id}`" class="ml-2 text-background-700 dark:text-background-300">
                          {{ category.name }}
                        </label>
                      </div>
                    </div>
                  </div>
                </div>

                <div>
                  <label class="input-label">Tags*</label>
                  <div class="space-y-2">
                    <div v-if="tags.length === 0" class="text-sm text-background-600 dark:text-background-400">
                      No tags available. Please create tags first.
                    </div>
                    <div v-else class="grid grid-cols-2 md:grid-cols-3 gap-2">
                      <div v-for="tag in tags" :key="tag.id" class="flex items-center">
                        <input
                            :id="`tag-${tag.id}`"
                            v-model="editingProduct.tags"
                            :value="tag.id"
                            type="checkbox"
                            class="checkbox"
                        />
                        <label :for="`tag-${tag.id}`" class="ml-2 text-background-700 dark:text-background-300">
                          {{ tag.name }}
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Images -->
              <div class="space-y-4 pt-2">
                <h3 class="heading-5 text-background-800 dark:text-background-200">Images</h3>

                <div>
                  <label class="input-label">Main Image*</label>
                  <div class="border border-dashed border-background-300 dark:border-background-600 rounded-lg p-4">
                    <div v-if="mainImagePreview" class="mb-4">
                      <img :src="mainImagePreview" alt="Main image preview" class="h-40 object-contain mx-auto" />
                    </div>
                    <div class="flex justify-center">
                      <label class="btn-secondary cursor-pointer">
                        <span>{{ mainImagePreview ? 'Change Image' : 'Select Image' }}</span>
                        <input
                            type="file"
                            accept="image/*"
                            class="hidden"
                            @change="handleMainImageUpload"
                        />
                      </label>
                    </div>
                  </div>
                </div>

                <div>
                  <label class="input-label">Gallery Images*</label>
                  <div class="border border-dashed border-background-300 dark:border-background-600 rounded-lg p-4">
                    <div v-if="galleryPreviews.length > 0" class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                      <div v-for="(preview, index) in galleryPreviews" :key="index" class="relative">
                        <img :src="preview" alt="Gallery image preview" class="h-24 w-full object-cover rounded-lg" />
                        <button
                            type="button"
                            @click="removeGalleryImage(index)"
                            class="absolute top-1 right-1 bg-error-500 text-white rounded-full p-1 hover:bg-error-600"
                        >
                          <XIcon class="h-3 w-3" />
                        </button>
                      </div>
                    </div>
                    <div class="flex justify-center">
                      <label class="btn-secondary cursor-pointer">
                        <span>Add Gallery Images</span>
                        <input
                            type="file"
                            accept="image/*"
                            multiple
                            class="hidden"
                            @change="handleGalleryUpload"
                        />
                      </label>
                    </div>
                  </div>
                </div>
              </div>

              <div class="flex justify-end space-x-3 pt-4 border-t border-background-200 dark:border-background-700">
                <button
                    type="button"
                    @click="showProductModal = false"
                    class="btn-secondary"
                >
                  Cancel
                </button>
                <button
                    type="submit"
                    class="btn-primary"
                    :disabled="isSaving"
                >
                  <span v-if="isSaving">
                    <LoaderIcon class="animate-spin h-4 w-4 mr-2" />
                    Saving...
                  </span>
                  <span v-else>
                    {{ editingProduct.id ? 'Update Product' : 'Create Product' }}
                  </span>
                </button>
              </div>
            </form>
          </div>
        </div>
      </transition>

      <!-- Delete confirmation modal -->
      <transition name="fade">
        <div
            v-if="showDeleteModal"
            class="fixed inset-0 bg-background-900/80 dark:bg-background-950/80 backdrop-blur-sm z-50 flex justify-center items-center p-4"
        >
          <div
              class="bg-white dark:bg-background-800 rounded-2xl shadow-elevated w-full max-w-md animate-slide-up"
              @click.stop
          >
            <div class="p-6 flex flex-col items-center text-center">
              <div class="bg-error-100 dark:bg-error-900/20 p-3 rounded-full mb-4">
                <AlertTriangleIcon class="h-8 w-8 text-error-500" />
              </div>
              <h2 class="heading-4 mb-2">Delete Product</h2>
              <p class="text-background-600 dark:text-background-400 mb-6">
                Are you sure you want to delete <span class="font-semibold text-background-800 dark:text-background-200">{{ productToDelete?.name }}</span>? This action cannot be undone.
              </p>
              <div class="flex gap-3 w-full">
                <button
                    @click="showDeleteModal = false"
                    class="btn-secondary flex-1"
                >
                  Cancel
                </button>
                <button
                    @click="deleteProduct"
                    class="btn-primary bg-error-500 hover:bg-error-600 focus:ring-error-500 flex-1"
                    :disabled="isDeleting"
                >
                  <span v-if="isDeleting">
                    <LoaderIcon class="animate-spin h-4 w-4 mr-2" />
                    Deleting...
                  </span>
                  <span v-else>Delete</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </transition>
    </AdminLayout>
  </div>
</template>

<script setup>
import { ref, computed, watch, onMounted, defineComponent, h } from 'vue';
import { useNuxtApp } from 'nuxt/app';

// You might need to create this layout component
// This is a placeholder that you can customize or replace with your actual admin layout
const AdminLayout = defineComponent({
  setup(_, { slots }) {
    return () => h('div', {}, [
      h('div', { class: 'p-6' }, slots.header?.()),
      h('div', { class: 'p-6' }, slots.default?.())
    ]);
  }
});
import {
  PlusIcon,
  SearchIcon,
  PencilIcon,
  TrashIcon,
  XIcon,
  ImageIcon,
  AlertCircleIcon,
  AlertTriangleIcon,
  LoaderIcon,
  PackageIcon
} from 'lucide-vue-next';

// Get PocketBase client
const { $pb } = useNuxtApp();

// Product list state
const products = ref([]);
const categories = ref([]);
const tags = ref([]);
const isLoading = ref(true);
const error = ref(null);

// Search and filter state
const searchQuery = ref('');
const categoryFilter = ref('');
const sortBy = ref('name_asc');
const currentPage = ref(1);
const itemsPerPage = 10;

// Modal state
const showProductModal = ref(false);
const showDeleteModal = ref(false);
const editingProduct = ref({
  name: '',
  slug: '',
  shortDescription: '',
  longDescription: '',
  price: 0,
  promoPrice: null,
  stock: null,
  isFeatured: false,
  category: [],
  tags: [],
  image: null,
  gallery: []
});
const productToDelete = ref(null);
const isSaving = ref(false);
const isDeleting = ref(false);

// CRUD functions
function openProductModal(product = null) {
  if (product) {
    // Edit existing product
    editingProduct.value = {
      id: product.id,
      name: product.name,
      slug: product.slug,
      shortDescription: product.shortDescription,
      longDescription: product.longDescription,
      price: product.price,
      promoPrice: product.promoPrice,
      stock: product.stock,
      isFeatured: product.isFeatured,
      category: [...product.category],
      tags: [...product.tags],
      // We don't copy the image and gallery here as they're handled differently
    };

    // Set image previews
    mainImagePreview.value = product.imageUrl;
    galleryPreviews.value = [...product.galleryUrls];
  } else {
    // Create new product
    editingProduct.value = {
      name: '',
      slug: '',
      shortDescription: '',
      longDescription: '',
      price: 0,
      promoPrice: null,
      stock: null,
      isFeatured: false,
      category: [],
      tags: [],
      image: null,
      gallery: []
    };

    // Clear image previews
    mainImagePreview.value = null;
    galleryPreviews.value = [];
    mainImageFile.value = null;
    galleryFiles.value = [];
  }

  showProductModal.value = true;
}

function confirmDeleteProduct(product) {
  productToDelete.value = product;
  showDeleteModal.value = true;
}

// Image preview state
const mainImagePreview = ref(null);
const galleryPreviews = ref([]);
const mainImageFile = ref(null);
const galleryFiles = ref([]);

// Image handling functions
function handleMainImageUpload(event) {
  const file = event.target.files[0];
  if (!file) return;

  mainImageFile.value = file;
  mainImagePreview.value = URL.createObjectURL(file);
}

function handleGalleryUpload(event) {
  const files = Array.from(event.target.files);
  if (!files.length) return;

  // Add to existing files
  galleryFiles.value = [...galleryFiles.value, ...files];

  // Create and add previews
  const newPreviews = files.map(file => URL.createObjectURL(file));
  galleryPreviews.value = [...galleryPreviews.value, ...newPreviews];
}

function removeGalleryImage(index) {
  // We need to handle differently for existing images vs new uploads
  if (index < galleryPreviews.value.length) {
    galleryPreviews.value.splice(index, 1);
  }

  if (index < galleryFiles.value.length) {
    galleryFiles.value.splice(index, 1);
  }
}

// Load data
onMounted(async () => {
  try {
    isLoading.value = true;
    await Promise.all([
      loadProducts(),
      loadCategories(),
      loadTags()
    ]);
  } catch (err) {
    console.error('Error loading initial data:', err);
    error.value = 'Failed to load data. Please try refreshing the page.';
  } finally {
    isLoading.value = false;
  }
});

// Computed properties
const filteredProducts = computed(() => {
  let result = [...products.value];

  // Apply search filter
  if (searchQuery.value) {
    const query = searchQuery.value.toLowerCase();
    result = result.filter(product =>
        product.name.toLowerCase().includes(query) ||
        product.shortDescription.toLowerCase().includes(query) ||
        product.slug.toLowerCase().includes(query)
    );
  }

  // Apply category filter
  if (categoryFilter.value) {
    result = result.filter(product =>
        product.category && product.category.includes(categoryFilter.value)
    );
  }

  // Apply sorting
  switch (sortBy.value) {
    case 'name_asc':
      result.sort((a, b) => a.name.localeCompare(b.name));
      break;
    case 'name_desc':
      result.sort((a, b) => b.name.localeCompare(a.name));
      break;
    case 'price_asc':
      result.sort((a, b) => a.price - b.price);
      break;
    case 'price_desc':
      result.sort((a, b) => b.price - a.price);
      break;
    case 'created_desc':
      result.sort((a, b) => new Date(b.created) - new Date(a.created));
      break;
    case 'created_asc':
      result.sort((a, b) => new Date(a.created) - new Date(b.created));
      break;
  }

  return result;
});

const paginatedProducts = computed(() => {
  const start = (currentPage.value - 1) * itemsPerPage;
  return filteredProducts.value.slice(start, start + itemsPerPage);
});

const totalPages = computed(() => {
  return Math.ceil(filteredProducts.value.length / itemsPerPage) || 1;
});

// Helpers
function getCategoryName(categoryId) {
  const category = categories.value.find(c => c.id === categoryId);
  return category ? category.name : 'Unknown';
}

// Watch for changes in filtered products to reset page if needed
watch(filteredProducts, () => {
  if (currentPage.value > totalPages.value) {
    currentPage.value = 1;
  }
});

// Watch for slug generation
watch(() => editingProduct.value.name, (newName) => {
  if (newName && !editingProduct.value.id) {
    editingProduct.value.slug = newName
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-+|-+$/g, '');
  }
});

// Data loading functions
async function loadProducts() {
  try {
    const records = await $pb.collection('products').getList(1, 100, {
      expand: 'category,tags'
    });

    products.value = records.items.map(item => {
      // Add image URLs
      const imageUrl = item.image ? $pb.files.getUrl(item, item.image) : null;
      const galleryUrls = item.gallery ? item.gallery.map(img => $pb.files.getUrl(item, img)) : [];

      return {
        ...item,
        imageUrl,
        galleryUrls
      };
    });
  } catch (err) {
    console.error('Error loading products:', err);
    throw new Error('Failed to load products');
  }
}

async function loadCategories() {
  try {
    const records = await $pb.collection('categories').getList(1, 100);
    categories.value = records.items;
  } catch (err) {
    console.error('Error loading categories:', err);
    throw new Error('Failed to load categories');
  }
}

async function loadTags() {
  try {
    const records = await $pb.collection('tags').getList(1, 100);
    tags.value = records.items;
  } catch (err) {
    console.error('Error loading tags:', err);
    throw new Error('Failed to load tags');
  }
}

async function saveProduct() {
  isSaving.value = true;

  try {
    const formData = new FormData();

    // Add basic product information
    formData.append('name', editingProduct.value.name);
    formData.append('slug', editingProduct.value.slug);
    formData.append('shortDescription', editingProduct.value.shortDescription);
    formData.append('longDescription', editingProduct.value.longDescription || '');
    formData.append('price', editingProduct.value.price);

    if (editingProduct.value.promoPrice !== null) {
      formData.append('promoPrice', editingProduct.value.promoPrice);
    }

    if (editingProduct.value.stock !== null) {
      formData.append('stock', editingProduct.value.stock);
    }

    formData.append('isFeatured', editingProduct.value.isFeatured);

    // Add category and tags (PocketBase expects JSON strings for arrays)
    formData.append('category', JSON.stringify(editingProduct.value.category));
    formData.append('tags', JSON.stringify(editingProduct.value.tags));

    // Add images
    if (mainImageFile.value) {
      formData.append('image', mainImageFile.value);
    }

    // Add gallery images
    if (galleryFiles.value.length > 0) {
      galleryFiles.value.forEach(file => {
        formData.append('gallery', file);
      });
    }

    let savedProduct;

    if (editingProduct.value.id) {
      // Update existing product
      savedProduct = await $pb.collection('products').update(
          editingProduct.value.id,
          formData
      );
    } else {
      // Create new product
      savedProduct = await $pb.collection('products').create(formData);
    }

    // Refresh products list
    await loadProducts();

    // Close modal
    showProductModal.value = false;

    // Show success message
    alert(editingProduct.value.id ? 'Product updated successfully!' : 'Product created successfully!');

  } catch (err) {
    console.error('Error saving product:', err);
    alert(`Error: ${err.message}`);
  } finally {
    isSaving.value = false;
  }
}

async function deleteProduct() {
  if (!productToDelete.value) return;

  isDeleting.value = true;

  try {
    await $pb.collection('products').delete(productToDelete.value.id);

    // Remove from local state
    products.value = products.value.filter(p => p.id !== productToDelete.value.id);

    // Close modal
    showDeleteModal.value = false;
    productToDelete.value = null;

    // Show success message
    alert('Product deleted successfully!');
  } catch (err) {
    console.error('Error deleting product:', err);
    alert(`Error: ${err.message}`);
  } finally {
    isDeleting.value = false;
  }
}
</script>